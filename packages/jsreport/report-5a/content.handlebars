<!DOCTYPE html>
<style>{#asset /css/styles.css @encoding=utf8}</style>

{{#unless totals.total}}
    <h3 class="error">0 results returned for given report parameters</h3>
{{else}}
    <div class="table-wrapper">
        <table class="styled-table">
            <thead>
            <tr class="table-header">
                <th colspan="6">Newly Started ART by age and sex</th>
            </tr>
            <tr>
                <th class="table-disagg">Age group</th>
                <th colspan="4" class="table-disagg">Sex</th>
                <th class="table-disagg">Total</th>
            </tr>
            <tr>
                <th></th>
                <th>Male</th>
                <th>Female</th>
                <th>Other</th>
                <th>Unknown</th>
                <th>N</th>
            </tr>
            </thead>
            <tbody>
            {{#each rows}}
                <tr>
                    <td>{{ageGroup}}</td>
                    <td>{{males}} ({{formatNumber malesPercent}}%)</td>
                    <td>{{females}} ({{formatNumber femalesPercent}}%)</td>
                    <td>{{others}} ({{formatNumber othersPercent}}%)</td>
                    <td>{{unknowns}} ({{formatNumber unknownsPercent}}%)</td>
                    <td>{{total}} ({{formatNumber totalPercent}}%)</td>
                </tr>
            {{/each}}
            </tbody>
            <tfoot>
            {{#with totals}}
                <tr>
                    <td>Total</td>
                    <td>{{males}} ({{formatNumber malesPercent}}%)</td>
                    <td>{{females}} ({{formatNumber femalesPercent}}%)</td>
                    <td>{{others}} ({{formatNumber othersPercent}}%)</td>
                    <td>{{unknowns}} ({{formatNumber unknownsPercent}}%)</td>
                    <td>{{total}} (100.0%)</td>
                </tr>
            {{/with}}
            </tfoot>
        </table>
    </div>
    <span id="data-serialized" style="display: none;">{{serialize .}}</span>

    <div style='page-break-before: always;'></div>

    <div id="chartdiv" class="chart box"></div>
{{/unless}}
<script>
    function renderCharts() {
        am4core.ready(function () {
            const data = JSON.parse(document.getElementById('data-serialized').innerHTML)

            //chartdiv
          var chart = am4core.create("chartdiv", am4charts.XYChart);
          chart.data = data.rows
          chart.legend = new am4charts.Legend();
          chart.events.on('ready', () => {
            chartLoaded('chart1')
          })

          var title = chart.titles.create();
          title.text = "Distribution of patients newly started on ART by sex and age";
          title.fontSize = 25;
          title.marginBottom = 30;

          var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
          var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
          categoryAxis.dataFields.category = "ageGroup";
          categoryAxis.renderer.grid.template.location = 0;
          categoryAxis.renderer.cellStartLocation = 0.1;
          categoryAxis.renderer.cellEndLocation = 0.9;
          categoryAxis.renderer.labels.template.rotation = -90;
          categoryAxis.renderer.labels.template.dx = -15;
          categoryAxis.renderer.minGridDistance = 20;

          var series1 = chart.series.push(new am4charts.ColumnSeries());
          series1.dataFields.categoryX = "ageGroup";
          series1.dataFields.valueY = "males";
          series1.name = "Male"

          var series2 = chart.series.push(new am4charts.ColumnSeries());
          series2.dataFields.categoryX = "ageGroup";
          series2.dataFields.valueY = "females";
          series2.name = "Female"
        })
    }
    const scriptsToLoad = [
        'https://cdn.amcharts.com/lib/4/core.js',
        'https://cdn.amcharts.com/lib/4/charts.js',
    ]
    function createScriptElement() {
        // gets the first script in the list
        const script = scriptsToLoad.shift()
        // all scripts were loaded
        if (!script) {
            console.log('All scripts loaded, rendering charts')
            renderCharts()
            return
        }
        console.log(`loading script ${script}`)
        const js = document.createElement('script')
        js.type = 'text/javascript'
        js.src = script
        js.onload = loadNextScript
        const s = document.getElementsByTagName('script')[0]
        s.parentNode.insertBefore(js, s)
    }
    function loadNextScript() {
        // loads the next script
        createScriptElement()
    }
    loadNextScript()
    // wait for the charts to load and animations to complete
    const waitingForCharts = ['chart1']
    function chartLoaded(name) {
        if (waitingForCharts.indexOf(name) > -1) {
            waitingForCharts.splice(waitingForCharts.indexOf(name), 1)
        }
        if (waitingForCharts.length === 0) {
            window.JSREPORT_READY_TO_START = true; // this will start the pdf printing
        }
    }
</script>